"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5202],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=n.createContext({}),s=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(u.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=s(t),f=a,y=p["".concat(u,".").concat(f)]||p[f]||m[f]||o;return t?n.createElement(y,l(l({ref:r},c),{},{components:t})):n.createElement(y,l({ref:r},c))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6258:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=t(7462),a=(t(7294),t(3905));const o={sidebar_position:3},l="Memory squares",i={unversionedId:"plouffe-lib/interface/games/memorysquares",id:"plouffe-lib/interface/games/memorysquares",title:"Memory squares",description:"- Importing only memory squares if you didnt import interface before",source:"@site/docs/plouffe-lib/interface/games/memorysquares.md",sourceDirName:"plouffe-lib/interface/games",slug:"/plouffe-lib/interface/games/memorysquares",permalink:"/docs/plouffe-lib/interface/games/memorysquares",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Lines",permalink:"/docs/plouffe-lib/interface/games/lines"},next:{title:"Reaction",permalink:"/docs/plouffe-lib/interface/games/reaction"}},u={},s=[],c={toc:s};function m(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"memory-squares"},"Memory squares"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Importing only memory squares if you didnt import interface before")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'    local MemorySquares = exports.plouffe_lib:Get("Interface", "MemorySquares")\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example usage")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"    local win = MemorySquares.New(data)\n    print(win)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Data structure ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"    time : number -- time to complete the game in seconds\n    amount : number -- if its 2 the game will be a 2x2\n    solutionAmount : number -- needs to be lower than the total squares\n    errors : number -- Allowed number of errors\n    delay : delay -- delay before the game starts\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Test command if the lib is in debug mode ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MemorySquares\n")))}m.isMDXComponent=!0}}]);